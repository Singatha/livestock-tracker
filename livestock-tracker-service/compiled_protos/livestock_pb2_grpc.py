# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import livestock_pb2 as livestock__pb2


class LivestockServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetLivestockByID = channel.unary_unary(
                '/livestock.LivestockService/GetLivestockByID',
                request_serializer=livestock__pb2.GetLivestockByIDRequest.SerializeToString,
                response_deserializer=livestock__pb2.GetLivestockByIDResponse.FromString,
                )
        self.AddLivestock = channel.unary_unary(
                '/livestock.LivestockService/AddLivestock',
                request_serializer=livestock__pb2.AddLivestockRequest.SerializeToString,
                response_deserializer=livestock__pb2.AddLivestockResponse.FromString,
                )
        self.EditLivestock = channel.unary_unary(
                '/livestock.LivestockService/EditLivestock',
                request_serializer=livestock__pb2.EditLivestockRequest.SerializeToString,
                response_deserializer=livestock__pb2.EditLivestockResponse.FromString,
                )
        self.RemoveLivestock = channel.unary_unary(
                '/livestock.LivestockService/RemoveLivestock',
                request_serializer=livestock__pb2.RemoveLivestockRequest.SerializeToString,
                response_deserializer=livestock__pb2.RemoveLivestockResponse.FromString,
                )
        self.GetLivestock = channel.unary_unary(
                '/livestock.LivestockService/GetLivestock',
                request_serializer=livestock__pb2.GetLivestockRequest.SerializeToString,
                response_deserializer=livestock__pb2.GetLivestockResponse.FromString,
                )


class LivestockServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetLivestockByID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddLivestock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EditLivestock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveLivestock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLivestock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LivestockServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetLivestockByID': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLivestockByID,
                    request_deserializer=livestock__pb2.GetLivestockByIDRequest.FromString,
                    response_serializer=livestock__pb2.GetLivestockByIDResponse.SerializeToString,
            ),
            'AddLivestock': grpc.unary_unary_rpc_method_handler(
                    servicer.AddLivestock,
                    request_deserializer=livestock__pb2.AddLivestockRequest.FromString,
                    response_serializer=livestock__pb2.AddLivestockResponse.SerializeToString,
            ),
            'EditLivestock': grpc.unary_unary_rpc_method_handler(
                    servicer.EditLivestock,
                    request_deserializer=livestock__pb2.EditLivestockRequest.FromString,
                    response_serializer=livestock__pb2.EditLivestockResponse.SerializeToString,
            ),
            'RemoveLivestock': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveLivestock,
                    request_deserializer=livestock__pb2.RemoveLivestockRequest.FromString,
                    response_serializer=livestock__pb2.RemoveLivestockResponse.SerializeToString,
            ),
            'GetLivestock': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLivestock,
                    request_deserializer=livestock__pb2.GetLivestockRequest.FromString,
                    response_serializer=livestock__pb2.GetLivestockResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'livestock.LivestockService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LivestockService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetLivestockByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/livestock.LivestockService/GetLivestockByID',
            livestock__pb2.GetLivestockByIDRequest.SerializeToString,
            livestock__pb2.GetLivestockByIDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddLivestock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/livestock.LivestockService/AddLivestock',
            livestock__pb2.AddLivestockRequest.SerializeToString,
            livestock__pb2.AddLivestockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EditLivestock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/livestock.LivestockService/EditLivestock',
            livestock__pb2.EditLivestockRequest.SerializeToString,
            livestock__pb2.EditLivestockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveLivestock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/livestock.LivestockService/RemoveLivestock',
            livestock__pb2.RemoveLivestockRequest.SerializeToString,
            livestock__pb2.RemoveLivestockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLivestock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/livestock.LivestockService/GetLivestock',
            livestock__pb2.GetLivestockRequest.SerializeToString,
            livestock__pb2.GetLivestockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
